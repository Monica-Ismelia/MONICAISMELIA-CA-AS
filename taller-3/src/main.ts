import { NestFactory } from '@nestjs/core'; //  Importa la funci√≥n para crear la aplicaci√≥n NestJS
import { AppModule } from './app.module';// Importa el m√≥dulo ra√≠z de la aplicaci√≥n
import { Client } from 'pg'; // Importa el cliente de PostgreSQL

async function bootstrap() { // Funci√≥n principal para iniciar la aplicaci√≥n
  // Configuraci√≥n de conexi√≥n sin base espec√≠fica
  const client = new Client({ // Configura el cliente de PostgreSQL
    user: 'postgres',// Usuario de la base de datos
    host: 'localhost',// Direcci√≥n del servidor de la base de datos
    password: '',// aqui  debe  de  ir Contrase√±a del usuario
    port: 5432,// Puerto de conexi√≥n
  });

  try { // Intenta conectar y crear la base de datos si no existe
    await client.connect(); 
    console.log('üîó Conectado temporalmente a PostgreSQL');

    // Verifica si existe la base de datos
    const res = await client.query( // Consulta para verificar la existencia de la base de datos
      "SELECT 1 FROM pg_database WHERE datname = 'veterinary_clinic'"
    );// cerrando la consulta

    if (res.rowCount === 0) { // Si no existe, crea la base de datos
      await client.query('CREATE DATABASE veterinary_clinic');// Crea la base de datos
      console.log('‚úÖ Base de datos "veterinary_clinic" creada exitosamente');// Mensaje de √©xito
    } else {
      console.log('‚ÑπÔ∏è La base de datos "veterinary_clinic" ya existe');// Mensaje si ya existe
    }
  } catch (error) { 
    console.error('‚ùå Error al conectar o crear la base de datos:', error);// Mensaje de error
  } finally { // Siempre cierra la conexi√≥n temporal
    await client.end();// Cierra la conexi√≥n con el servidor de PostgreSQL
  }

  // Inicia la aplicaci√≥n NestJS normalmente
  const app = await NestFactory.create(AppModule);
  await app.listen(3000);
  console.log('üöÄ Aplicaci√≥n corriendo en http://localhost:3000');
}
bootstrap();
